"""
tcprelay.r2py --- a simplistic TCP relay

Usage:

To start a TCP relay on your vessel, no arguments are needed:
  tcprelay.r2py

(By default, the first half of the vessel's connports will be
used as control ports. See the vessel log for details.)

To use a TCP relay for listening on behalf of LOCAL_PORT, use
``client'' mode and specify which RELAY_IP_ADDRESS and RELAY_PORT
to use:
  tcprelay.r2py client LOCAL_PORT RELAY_IP_ADDRESS RELAY_PORT

(This is similar to `ssh`'s -L option. Incoming forwarded
connections are then made available on the local port, to
which you can connect using `netcat` or similar, e.g.
`nc 127.0.0.1 LOCAL_PORT`)

-----
# Overview

The TCP relay has two groups of server ports:
* Some for incoming control connections from clients,
* Some for incoming userplane connections from remote stations.

To set up relaying, a client
* Connects to a control port on the relay,
* Receives the relayed listening port supplied by the relay, and
* Keeps the control connection alive as long as it uses the relay.

To receive incoming connections on the relayed port, the client
connects to its relay control port from a different source port.
The relay then does either of two things:
* If no incoming remote station waits, it closes the connection
* Else, it
  - Accepts the connection,
  - Sends the remote station's IP address and port on the control
    connection, and then
  - forwards data betweeen the client and the remote station.

Connection closes from either side cause the forwarded connection
to be closed by the relay as well.


# Commentary

The assumption for the "receive incoming" part to work is that
* It suffices to identify (ahem) clients by their public IP address.
* Although multiple clients may share the same IP, we hope that
  - Each client likely uses a different control port (or relay).
  - Even if a second client on that public IP and relay tries an
    already-used control port, the probability is low that a new
    remote station comes in at that very moment. Thus, the second
    client's connection will be dropped instantly.
(If this becomes a problem, we can try to enforce collision-free port
usage by clients on the same public IP, or add application-layer tokens.)

Clients that share a pubic IP must use different control ports on
the same relay. However, clients from different public IPs may share
the control port. This may skew the proportion of control to relayed
ports to our favor (i.e. yield more relayed ports).
"""

