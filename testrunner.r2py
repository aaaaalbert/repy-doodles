filename = callargs[0]
callargs = callargs[1:]

pragma_out = []
had_disallowed_output = [False]

vessellog = log

def log(*args):
  line = ""
  for arg in args:
    line += str(arg) + " "

  if not is_output_allowed(line):
    had_disallowed_output[0] = True

  vessellog(line)



def is_output_allowed(line):
  for allowed_substring in pragma_out:
    if allowed_substring in line:
      return True
  else:
    return False



def read_in_file(filename):
  test_file = openfile(filename, False)
  test_code = test_file.readat(None, 0)
  test_file.close()
  return test_code



test_code = read_in_file(filename)
pragma_repy_source_file = ""
have_pragma_repy = False

for line in test_code.splitlines():
  if line.startswith("#pragma repy"):
    have_pragma_repy = True
    parts = line.split()
    if len(parts) >= 4:
      # This would be "#pragma repy restrictions SOMETHING ..."
      # Treat SOMETHING as the actual source file to run, but
      # ignore its pramgas.
      pragma_repy_source_file = parts[3]
      
  if line.startswith("#pragma out"):
    pragma_out.append(line[len("#pragma out"):])


if not have_pragma_repy:
  log("*** Cannot run non-Repy test", filename, "\n\n")
  exitall()


if pragma_repy_source_file:
  test_code = read_in_file(pragma_repy_source_file)
  # UTF doesn't treat callargs correctly / at all currently, see
  # SeattleTestbed/utf#75. We don't try to, either.


try:
  test_namespace = createvirtualnamespace(test_code, filename)
  test_namespace.evaluate(_context)
except Exception, e:
  vessellog("*** Exception in", filename, repr(e), "\n\n\n")
  log(getlasterror(), "\n\n\n")
  log(filename, "FAILED\n")
  exitall()


if had_disallowed_output[0]:
  log(filename, "FAILED\n")
else:
  log(filename, "PASSED\n")

